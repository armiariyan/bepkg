package dh

import (
	"math/big"
	"testing"
)

func TestGenerateKey(t *testing.T) {
	_, _, err := GenerateKey(nil)

	if err != nil {
		t.Errorf("Something happen, %s", err)
	}
}

func TestSelfExchange(t *testing.T) {
	AlicePriv, AlicePublic, err := GenerateKey(nil)

	if err != nil {
		t.Errorf("Something happen with alice, %s", err)
	}

	BobPriv, BobPublic, err := GenerateKey(nil)

	if err != nil {
		t.Errorf("Something happen with bob, %s", err)
	}

	AliceSecret := ComputeSecret(AlicePriv, BobPublic)
	BobSecret := ComputeSecret(BobPriv, AlicePublic)

	if AliceSecret.String() != BobSecret.String() {
		t.Errorf("Secret mismatch,\nAlice = %s;\nBob = %s\n", AliceSecret.String(), BobSecret.String())
	}
}

func TestPeerExchange(t *testing.T) {

	priv, _ := new(big.Int).SetString("12476791175780025455958006275504254207304867006019480810839319991181822817806475947643598839679680108436091624202307838369729609003405817291734344439289787497339914016441189075030573378583216922973082241384575357343695630023636081229910685886215752454537365944184447163605469448324731324586971440004246578940020688188060390584823652590346073919136567086385311389046898147381862488890375784352209182991689975220312528048279578102140321231787754882580056228066478282292409423690386442301635464270380345044871207269824263688212111309299336581703372773640717707262003592434882600272085229700740550906342934132878853014070507888346334850903823596940060939646306611102988874464522331145885644345002873241498424128150835328872516128885696765977319305270019210336204580723090076724953801281136031014823102808705077228353104909118675276336956493618659579446241353613652844093199452719322800062499950710821643554932220972939166532562", 10)
	peerPub, _ := new(big.Int).SetString("701424696546900711196239249755855284180072397474694403065902744454570711326686623961151389037436791111557456370689957990705248982559224742598653009658343650485228903140644232753553720853464971744405653384206499093395040330670446126368841052217428025613159280798550578739091297711621648612819557429474979029751429408801588268208190966890836215738172211113567367756144470632957685272093382136857782348426130647831365277567518534400690202579775962479580325141944660074237331669941502307807178935952588869820996593843378331817140462850127745731297402832580574624292241263667515406624517493173730274009738579419448606019922904404367201855877852436838579294009467868197301021453251934115443582195283954515942953004481423950565294300128756445312947001839136690712535245833711479065769467159435068207950738925336820615067299609987615208051109483656185009988705527662704941125434124026044282099487073151882085180250715787330819632813", 10)
	peerSecret, _ := new(big.Int).SetString("2085590150588384228734623084628066987410459343041926187549313857167023093163312280201522018897531657550407323731548805275759516730736351809420912244292804233985993119514476561813979707415998153073537319482592710193424835221329763972322009400014220166992690556996449169398439002151715008343255250172741141440714597364203661153785066510577831294437960536550117504293325039437640577353639169575795450684345169861618739157259895098385662981887466528517542765765627092564038873140635332875233890728802478931871641669468324089114809715749262760775432803299347496817763154146938667155292419117155786059084671965586992863766134302491580186818371321060485813054854367610423421573701985719379959625904302111232413929960361805894251529035551750564404316297987344549517688039862420915585329543835713615271040608612526575144629522903951486580900865858033871665067483232555997882314910809150535899141967534727873653430426149451114410068468", 10)
	err := Check(peerPub)
	if err != nil {
		t.Errorf("Something happen with peer pub, %s", err)
	}

	hostSecret := ComputeSecret(priv, peerPub)

	if hostSecret.String() != peerSecret.String() {
		t.Errorf("Secret mismatch,\nHost = %s;\nPeer = %s\n", hostSecret.String(), peerSecret.String())
	}

}
